// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password    String?
  role    Role   @default(USER)

  venues    Venue[]
  bookings   Booking[]

  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Venue {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  address       String
  city          String
  province      String
  capacity      Int
  price         Float
  facilities    String[]
  images        VenueImage[]
  bookings      Booking[]
  createdBy     String
  user          User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([name, city, province])
}

model VenueImage {
  id        String   @id @default(cuid())
  url       String
  venueId   String   @map("venue_id")
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([venueId])
}


enum BookingStatus {
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
  CANCELLED
}
model Booking {
  id            String        @id @default(cuid())
  venueId       String        @map("venue_id")
  venue         Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  userId        String        @map("user_id")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate     DateTime
  endDate       DateTime
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  paymentProof  String?
  notes         String?
  addons        BookingAddon[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([venueId, userId, startDate])
  @@unique([venueId, startDate, endDate])
}

model BookingAddon {
  id            String    @id @default(cuid())
  name          String
  description   String?
  price         Float
  bookingId     String    @map("booking_id")
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@index([bookingId])
}
model AddonService {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  price         Float
  category      AddonCategory
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
}

enum AddonCategory {
  CATERING
  DECORATION
  SOUND_SYSTEM
  PHOTOGRAPHY
  TRANSPORTATION
  OTHER
}